#!/usr/bin/env python

import re
import subprocess

import sys

if len(sys.argv) < 2:
    print "Error: need a configuration name!"
    sys.exit(1)

def call(cmd):
    subprocess.check_call(cmd, shell = True)

def mode_sort(modes):
    modes.sort(key = lambda x: int(x.split('x')[0]), reverse = True)
    return modes

def intersection(modes1, modes2):
    return list(set(modes1).intersection(set(modes2)))

def modes(output, xrandr_output):
    iterator = iter(xrandr_output)
    modes = []
    for line in iterator:
        if re.match('^' + output, line):
            break
    for line in iterator:
        match = re.match('^\s*([0-9]*x[0-9]*)', line)
        if match:
            modes.append(match.group(1))
        else:
            break
    return modes

xrandr_output = subprocess.check_output("xrandr").split("\n")

active = []
internal = 'eDP1'

for line in xrandr_output:
    if re.match("^(.*) connected", line):
        active.append(line.split()[0])

external = [e for e in active if e != internal][0]

if sys.argv[1] == 'internal':
    call("xrandr --output %s --off" % external)
    call("xrandr --output %s --primary --auto" % internal)

if sys.argv[1] == 'external':
    call("xrandr --output %s --off" % internal)
    call("xrandr --output %s --primary --auto" % external)

if sys.argv[1] == 'mirror':
    internal_modes = modes(internal, xrandr_output)
    external_modes = modes(external, xrandr_output)
    best_mode = mode_sort(intersection(internal_modes, external_modes))[0]
    call("xrandr --output %s --mode %s" % (internal, best_mode))
    call("xrandr --output %s --mode %s" % (external, best_mode))

if sys.argv[1] == 'left-of':
    call("xrandr --output %s --auto" % (internal))
    call("xrandr --output %s --auto --left-of %s" % (external, internal))

if sys.argv[1] == 'right-of':
    call("xrandr --output %s --auto" % (internal))
    call("xrandr --output %s --auto --right-of %s" % (external, internal))
